#include<stdio.h>
#include<stdlib.h>
#define max(a,b) ((a>b)?a:b)
#define min(a,b) ((a<b)?a:b)

typedef struct Adjacency_List *list;
typedef struct queue *Listqueue;
typedef struct Graph *graph;

struct Adjacency_List{
    int vertex;
    int time;
    list next;
};

struct queue {
    list element;
    list front;
    list rear;
};

struct Graph {
    list *verhead;
    int vertex_num;
};

void Initialize_AdjacencyList( graph *g, int vertex_num );
void Insert_Edge( graph g, int v1, int v2, int time );
void Read_AdjacencyList( graph g );

void CriticalPath( graph g );
void TopSort( graph g, int *topsort );
void EarlyFinishPath( graph g, int *pretime, int *topsort );
void LastFinishPath( graph g, int *afttime, int *topsort, int totaltime );
void GetPreparedArray( int *array, int length, int pre );
void GetIndegreeArray( graph g, int *indegree );

void Initialize_Queue( Listqueue *q );
void Insert_Queue( Listqueue q, int vertex );
int Quit_Queue( Listqueue q );

int main()
{

    int vertex_num;
    int v1,v2;
    int time;
    graph g;

    scanf("%d",&vertex_num);
    Initialize_AdjacencyList( &g, vertex_num );

    scanf("%d%d%d",&v1,&v2,&time);
    while ( v1!=-1 && v2!=-1 ) {
        Insert_Edge( g, v1, v2, time );
        scanf("%d%d%d",&v1,&v2,&time);
    }
    Read_AdjacencyList(g);
    CriticalPath(g);

    return 0;

}

void Initialize_AdjacencyList( graph *g, int vertex_num )
{

    int i;

    *g = (graph)malloc(sizeof(struct Graph));
    (*g)->vertex_num = vertex_num;
    (*g)->verhead = (list*)malloc(vertex_num*sizeof(struct Adjacency_List));
    for ( i=0; i<vertex_num; i++ ) {
        (*g)->verhead[i] = (list)malloc(sizeof(struct Adjacency_List));
        (*g)->verhead[i]->vertex = i;
        (*g)->verhead[i]->next = NULL;
    }

}

void Insert_Edge( graph g, int v1, int v2, int time )
{

    list tmp = (list)malloc(sizeof(struct Adjacency_List));

    tmp->vertex = v2;
    tmp->time = time;
    tmp->next = g->verhead[v1]->next;
    g->verhead[v1]->next = tmp;

}

void Read_AdjacencyList( graph g )
{

    int i;

    printf("\n\n");
    for ( i=0; i<g->vertex_num; i++ ) {
        list p=g->verhead[i];
        printf("%d",p->vertex);
        while ( p=p->next ) {
            printf("----->%d",p->vertex);
        }
        printf("\n");
    }

}

/**
 *
 * 这是 [关键路径] 算法，其理论基础为：
 *  # 每个点的最早完成时间 == 最晚完成时间时，该点就成为关键路径中的一个点
 *
 * 其核心思想为：
 *  # 求出图的拓扑排序
 *  # 求出图中各点的最早完成和最晚完成时间
 *  # 结合理论基础求出关键路径
 *
 * @see      @EarlyFinishPath, @LastFinishPath
 *
 */
void CriticalPath( graph g )
{

    int i;
    int *pretime;
    int *afttime;
    int *topsort;

    pretime = (int *)calloc( g->vertex_num, sizeof(int) );
    afttime = (int *)calloc( g->vertex_num, sizeof(int) );
    topsort = (int *)calloc( sizeof(int), g->vertex_num );

    TopSort( g, topsort );
    EarlyFinishPath( g, pretime, topsort );
    LastFinishPath( g, afttime, topsort, pretime[g->vertex_num-1] );

    for ( i=0; i<g->vertex_num; i++ ) {
        if ( pretime[i]==afttime[i] ) {
            printf("(%d)-->",i,pretime[i],afttime[i]);
        }
    }
    free(topsort);
    free(afttime);
    free(pretime);

}

void TopSort( graph g, int *topsort )
{

    int i;
    Listqueue q;
    int *indegree;
    indegree = (int *)calloc( sizeof(int), g->vertex_num );
    GetIndegreeArray( g, indegree );
    Initialize_Queue(&q);

    int j=0;
    for ( i=0; i<g->vertex_num; i++ ) {
        if ( !indegree[i] ) {
            Insert_Queue( q, i );
        }
    }
    while ( q->front ) {
        list p;
        int v = Quit_Queue(q);
        topsort[j++] = v;
        for ( p=g->verhead[v]->next; p; p=p->next ) {
            if ( --indegree[p->vertex] == 0 ) {
                Insert_Queue( q, p->vertex );
            }
        }
    }
    free(indegree);
    free(q);

}

/**
 * 这是 [最早完成时间] 算法，其理论基础为：
 *  # 后继结点 (i) 的最早时间 = max 所有 ( 前驱结点 (j) 的最早时间 + i 本身的执行时间 )
 *
 * 其核心思想为：
 *  # 由于要找最大值，因此初始化数组时将其赋值为 0
 *  # 每个循环由前驱结点带头 (j)，然后遍历其后继结点
 *  # 结合理论基础更新各点的最早完成时间
 *
 * @see     @GetPreparedArray
 *
 */
void EarlyFinishPath( graph g, int *pretime, int *topsort )
{

    int i;
    GetPreparedArray( pretime, g->vertex_num, 0 );

    for ( i=0; i<g->vertex_num-1; i++ ) {
        list p = g->verhead[i];
        for ( p=p->next; p; p=p->next ) {
            pretime[p->vertex] = max( pretime[p->vertex], pretime[i]+p->time );
        }
    }

}

/**
 * 这是 [最晚完成时间] 算法，其理论基础为：
 *  # 前驱结点 (i) 的最晚时间 = min 所有 ( 后继结点 (j) 的最晚时间 - j 本身的执行时间 )
 *
 * 其核心思想为：
 *  # 由于要找最小值，因此初始化数组时将其赋值为最早完成时间数组的最后数值
 *  # 每个循环由前驱结点带头 (i)，然后遍历其后继结点
 *  # 结合理论基础更新各点的最早完成时间
 *
 * @see     @GetPreparedArray
 *
 */
void LastFinishPath( graph g, int *afttime, int *topsort, int totaltime )
{

    int i;
    GetPreparedArray( afttime, g->vertex_num, totaltime );

    for ( i=g->vertex_num-2; i>=0; i-- ) {
        list p = g->verhead[i];
        for ( p=p->next; p; p=p->next ) {
            afttime[i] = min( afttime[i], afttime[p->vertex]-p->time) ;
        }
    }

}

void GetPreparedArray( int *array, int length, int pre )
{
    int i;
    for ( i=0; i<length; i++ )
        array[i] = pre;
}

void GetIndegreeArray( graph g, int *indegree )
{

    list p;
    int i;

    for ( i=0; i<g->vertex_num; i++ ) {
        indegree[i] = 0;
    }

    for ( i=0; i<g->vertex_num; i++ ) {
        p = g->verhead[i]->next;
        while (p) {
            indegree[p->vertex]++;
            p = p->next;
        }
    }

}

void Initialize_Queue(Listqueue *q)
{

    *q = (Listqueue)malloc(sizeof(struct queue));
    (*q)->element = (*q)->front = (*q)->rear = NULL;

}

void Insert_Queue( Listqueue q, int vertex )
{

    list tmp = (list)malloc(sizeof(struct Adjacency_List));
    tmp->vertex = vertex;
    tmp->next = NULL;
    if ( q->front==NULL ) {
        q->element = tmp;
        q->front = tmp;
        q->rear = tmp;
    } else {
        q->rear->next = tmp;
        q->rear = tmp;
    }

}

int Quit_Queue(Listqueue q)
{

    int result = q->front->vertex;
    list p=q->front;
    q->front = p->next;
    free(p);
    if ( q->front==NULL ) {
        q->rear = NULL;
        q->element = NULL;
    }

    return result;

}
/*
10
0 1 3
0 2 2
1 3 3
1 4 2
2 4 2
2 5 1
3 6 3
4 6 3
4 7 2
5 7 2
5 8 4
6 9 1
7 9 1
8 9 1
-1 -1 -1
*/
