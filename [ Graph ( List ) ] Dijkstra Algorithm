#include<stdio.h>
#include<stdlib.h>

typedef struct Adjacency_List *list;

struct Adjacency_List{
    int vertex;
    int weight;
    list next;
};

void Initialize_AdjacencyList( list **verhead, int vertex_num );
void Insert_Edge( list verhead, int vertex, int weight );
void Read_AdjacencyList( list *verhead, int vertex_num );

void Dijkstra_Nucleus( list *verhead, int vertex_num );
void Initialize_AidArraies( int *a, int *p, int *k, int verqueue );
void ReadPath( int *p, int length );
int HasUnknownPoint( int *k, int *a, int length );

int main()
{

    int vertex_num;
    int v1,v2;
    int weight;
    list *verhead;

    scanf("%d",&vertex_num);
    Initialize_AdjacencyList( &verhead, vertex_num );

    scanf("%d%d%d",&v1,&v2,&weight);
    while ( v1!=-1 && v2!=-1 ) {
        Insert_Edge( verhead[v1], v2, weight );
        scanf("%d%d%d",&v1,&v2,&weight);
    }
    Read_AdjacencyList( verhead, vertex_num );
    Dijkstra_Nucleus( verhead, vertex_num );

    return 0;

}

void Initialize_AdjacencyList( list **verhead, int vertex_num )
{

    int i;

    *verhead = (list*)malloc(vertex_num*sizeof(struct Adjacency_List));
    for ( i=0; i<vertex_num; i++ ) {
        (*verhead)[i] = (list)malloc(sizeof(struct Adjacency_List));
        (*verhead)[i]->vertex = i;
        (*verhead)[i]->weight = 0;
        (*verhead)[i]->next = NULL;
    }

}

void Insert_Edge( list verhead, int vertex, int weight )
{

    list tmp = (list)malloc(sizeof(struct Adjacency_List));

    tmp->vertex = vertex;
    tmp->weight = weight;
    tmp->next = verhead->next;
    verhead->next = tmp;

}

void Read_AdjacencyList( list *verhead, int vertex_num )
{

    int i;

    printf("\n\n");
    for ( i=0; i<vertex_num; i++ ) {
        list p=verhead[i]->next;
        printf("%d",verhead[i]->vertex);
        while (p) {
            printf("---%d--->%d",p->weight,p->vertex);
            p = p->next;
        }
        printf("\n");
    }

}

/**
 * 这是 Dijkstra 最短路径算法，其核心思想为 [贪婪算法]:
 *
 * ### 每一轮寻找最短路径的未知终结点
 *
 * # 将 readstart 设置为已知 ( known )，一旦已知后将不再更新该结点的当前路径长
 * # 从 readstart 开始，每一轮先暂时将其所有的后继结点赋予当前路径长 ( arrive )
 * # 扫描 arrive，寻找当前的最短路径的未知终结点，并赋给 readstart 来启动下一次循环
 *
 * @param   @path       记录 i 的前驱结点
 * @param   @arrive     记录 i 的当前路径长
 *
 * @see     @HasUnknownPoint( 优化算法的关键 ), @ReadPath
 *
 */
void Dijkstra_Nucleus( list *verhead, int vertex_num )
{

    int *path;
    int *known;
    int *arrive;

    path = (int *)calloc( vertex_num, sizeof(int) );
    known = (int *)calloc( vertex_num, sizeof(int) );
    arrive = (int *)calloc( vertex_num, sizeof(int) );
    Initialize_AidArraies( arrive, path, known, vertex_num );

    list p;
    int readstart;

    scanf("%d",&readstart);
    path[readstart] = readstart;
    arrive[readstart] = 0;

    do {

        int i;
        known[readstart] = 1;

        for ( p=verhead[readstart]->next; p; p=p->next ) {
            int nowweight = arrive[readstart] + p->weight;
            // 1. 路径长未初始化的
            // 2. 当前登记的路径长比现在还大的进入分支
            if ( arrive[p->vertex]==-1 || arrive[p->vertex]>nowweight ) {
                path[p->vertex] = readstart;
                arrive[p->vertex] = nowweight;
            }
        }

    } while ( readstart = HasUnknownPoint( known, arrive, vertex_num ) );

    ReadPath( path, vertex_num );

}

void Initialize_AidArraies( int *a, int *p, int *k, int verqueue )
{
    int i;
    for ( i=0; i<verqueue; i++ ) {
        a[i] = -1;
        k[i] = 0;
        p[i] = -1;
    }
}

int HasUnknownPoint( int *k, int *a, int length )
{

    int i;
    int smallest=-1;
    int readstart=0;

    for ( i=0; i<length; i++ ) {
        // 过滤掉已知和未暂时登记路径长的
        if ( !k[i] && a[i]!=-1 ) {
            // 1. 首次达成条件时的初始化操作
            // 2. 目前路径长比最小路径短的登记进readstart
            if ( smallest==-1 || a[i]<smallest ) {
                smallest = a[i];
                readstart = i;
            }
        }
    }

    return readstart;

}

void ReadPath( int *p, int length )
{
    int goalpoint;
    while ( length-- ) {
        scanf("%d",&goalpoint);
        while ( p[goalpoint]!=goalpoint ) {
            printf("%d<-",goalpoint);
            goalpoint = p[goalpoint];
        }
        printf("%d\n",goalpoint);
    }
}

/*
7
0 1 2
0 3 1
1 3 3
1 4 10
2 0 4
2 5 5
3 2 2
3 5 8
3 6 4
3 4 2
4 6 6
6 5
1
-1 -1 -1
11
0 1 1
0 8 6
0 4 4
1 2 2
1 5 2
2 3 2
3 7 4
4 1 3
4 5 3
5 3 2
5 6 3
5 10 3
6 3 1
6 7 3
8 4 2
8 5 1
8 9 6
9 5 2
9 10 6
10 6 1
10 7 4
-1 -1 -1
*/
