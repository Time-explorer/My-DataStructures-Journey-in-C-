#include<stdio.h>
#include<stdlib.h>
#define up(x) ( (x-1)/2 )
#define down(x) ( 2*x+1 )

typedef struct Adjacency_List *list;
typedef struct GraphContent *graph;
typedef struct KruskalAidStruct EdgeSet;

struct Adjacency_List{                  // 原始邻接表
    int vertex;
    int weight;
    list next;
};

struct GraphContent {                   // 封装图的元数据
    list *verhead;
    int vertex_num;
    int edge_num;
};

struct KruskalAidStruct {               // 为优化查找最小而辅助的单位堆结构体
    int v1;
    int v2;
    int weight;
};

void Initialize_AdjacencyList( graph *g, int vertex_num );
void Insert_Edge( graph g, int v1, int v2, int weight );
void Read_AdjacencyList(graph g);

void KruskalAlgorithm(graph g);
void Initialize_RootArray( int *root, int length );
int FindRoot( int *root, int i );
void UnionSet( int *root, int v1, int v2 );

void Initialize_EdgeSet( EdgeSet *es, graph g, int length );
void InsertToEdgeSet( EdgeSet *es, EdgeSet x, int size );
EdgeSet FindMinInEdgeSet( EdgeSet *es, int size );

int main()
{

    int vertex_num;
    int v1,v2;
    int weight;
    graph g;

    scanf("%d",&vertex_num);
    Initialize_AdjacencyList( &g, vertex_num );

    scanf("%d%d%d",&v1,&v2,&weight);
    while ( v1!=-1 && v2!=-1 ) {
        Insert_Edge( g, v1, v2, weight );
        scanf("%d%d%d",&v1,&v2,&weight);
    }
    Read_AdjacencyList(g);
    KruskalAlgorithm(g);

    return 0;

}

void Initialize_AdjacencyList( graph *g, int vertex_num )
{

    int i;

    *g = (graph)malloc(sizeof(struct GraphContent));
    (*g)->vertex_num = vertex_num;
    (*g)->edge_num = 0;
    (*g)->verhead = (list*)malloc(vertex_num*sizeof(struct Adjacency_List));
    for ( i=0; i<vertex_num; i++ ) {
        (*g)->verhead[i] = (list)malloc(sizeof(struct Adjacency_List));
        (*g)->verhead[i]->vertex = i;
        (*g)->verhead[i]->next = NULL;
    }

}

void Insert_Edge( graph g, int v1, int v2, int weight )
{

    list tmp1 = (list)malloc(sizeof(struct Adjacency_List));
    tmp1->vertex = v2;
    tmp1->weight = weight;
    tmp1->next = g->verhead[v1]->next;
    g->verhead[v1]->next = tmp1;
    g->edge_num++;

}

void Read_AdjacencyList( graph g )
{

    int i;

    printf("\n\n");
    for ( i=0; i<g->vertex_num; i++ ) {
        list p=g->verhead[i];
        printf("%d",p->vertex);
        while ( p=p->next ) {
            printf("----->%d",p->vertex);
        }
        printf("\n");
    }

}

/**
 * 这是最小生成树算法 (Kruskal Version)，其核心思想为 (贪婪算法)：
 *
 * ### 每次找最小权的边，并时刻注意是否有环
 *
 * # 对于查找最小边，此次算法尝试堆的用法
 * # 先找出合适的边，然后通过 Union/Find 集合来测试该边的添加是否会给图形成环
 * # 无环情况下，已知边数加 1，并打印该边
 *
 * @param   @root[]             Union / Find 集合
 * @param   @edges[]            已堆形式排列的数组
 * @param   @EdgeKnowned        记录边已知数
 *
 * @see     @相关堆运算函数
 * @see     @相关并查集函数
 *
 */
void KruskalAlgorithm(graph g)
{

    int *root;
    EdgeSet *edges;
    edges = (EdgeSet *)calloc( g->edge_num, sizeof(struct KruskalAidStruct) );
    root = (int *)calloc( g->vertex_num, sizeof(int) );
    Initialize_RootArray( root, g->vertex_num );
    Initialize_EdgeSet( edges, g, g->vertex_num );

    int EdgeKnowned=0;
    int size=g->edge_num-1;
    while ( EdgeKnowned < g->vertex_num-1 ) {
        EdgeSet u = FindMinInEdgeSet( edges, size-- );
        int v1 = FindRoot( root, u.v1 );
        int v2 = FindRoot( root, u.v2 );
        if ( v1 != v2 ) {
            printf("(%d)--%d--(%d)\n",u.v1,u.weight,u.v2);
            EdgeKnowned++;
            UnionSet( root, v1, v2 );
        }
    }

    free(root);
    free(edges);

}

void Initialize_RootArray( int *root, int length )
{
    int i;
    for ( i=0; i<length; i++ ) {
        root[i] = -1;
    }
}

void Initialize_EdgeSet( EdgeSet *es, graph g, int length )
{
    int i,j;
    list p;
    EdgeSet x;
    for ( i=j=0,p=g->verhead[j]->next; ; i++, p=p->next ) {
        while ( !p ) {
            if ( ++j == length ) {
                break;
            }
            p = g->verhead[j]->next;
        }
        if ( j==length ) {
            break;
        }
        x.v1 = j;
        x.v2 = p->vertex;
        x.weight = p->weight;
        InsertToEdgeSet( es, x, i );
    }
}

void InsertToEdgeSet( EdgeSet *es, EdgeSet x, int size )
{
    int i=size;
    for ( i=size; i && es[up(i)].weight>x.weight; i=up(i) ) {
        es[i] = es[up(i)];
    }
    es[i] = x;
}

EdgeSet FindMinInEdgeSet( EdgeSet *es, int size )
{
    int i;
    int next;
    EdgeSet min;
    EdgeSet last;
    min = es[0];
    last = es[size];

    for ( i=0; down(i)<=size; i=next ) {
        next = down(i);
        if ( next<size && es[next].weight>es[next+1].weight ) {
            next++;
        }
        if ( es[next].weight < last.weight ) {
            es[i] = es[next];
        } else {
            break;
        }
    }
    es[i] = last;

    return min;
}

int FindRoot( int *root, int i )
{
    if ( root[i]<0 ) {
        return i;
    } else {
        return root[i] = FindRoot( root, root[i] );
    }
}

void UnionSet( int *root, int v1, int v2 )
{
    if ( root[v1]>root[v2] ) {
        UnionSet( root, v2, v1 );
    } else {
        root[v1] += root[v2];
        root[v2] = v1;
    }
}
/*
7
0 1 2
0 2 4
0 3 1
1 3 3
1 4 10
2 3 2
2 5 5
3 5 8
3 4 7
6 3 4
6 5 1
6 4 6
-1 -1 -1
*/
