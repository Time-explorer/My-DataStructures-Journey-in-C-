#include<stdio.h>
#include<stdlib.h>

typedef struct Adjacency_List *list;
typedef struct queue *Listqueue;

struct Adjacency_List{
    int vertex;
    list next;
};

struct queue {
    list element;
    list front;
    list rear;
};

void Initialize_AdjacencyList( list **verhead, int vertex_num );
void Insert_Edge( list verhead, int vertex );
void Read_AdjacencyList( list *verhead, int vertex_num );

void GetIndegree( list *verhead, int *indegree, int vertex_num );
void Initialize_Queue( Listqueue *q );
void TopSort( list *verhead, int vertex_num );

void Insert_Queue( Listqueue q, int vertex );
int Quit_Queue( Listqueue q );

int main()
{

    int vertex_num;
    int v1,v2;
    list *verhead;

    scanf("%d",&vertex_num);
    Initialize_AdjacencyList( &verhead, vertex_num );

    scanf("%d%d",&v1,&v2);
    while ( v1!=-1 && v2!=-1 ) {
        Insert_Edge( verhead[v1], v2 );
        scanf("%d%d",&v1,&v2);
    }
    Read_AdjacencyList( verhead, vertex_num );
    TopSort( verhead, vertex_num );

    return 0;

}

void Initialize_AdjacencyList( list **verhead, int vertex_num )
{

    int i;

    *verhead = (list*)malloc(vertex_num*sizeof(struct Adjacency_List));
    for ( i=0; i<vertex_num; i++ ) {
        (*verhead)[i] = (list)malloc(sizeof(struct Adjacency_List));
        (*verhead)[i]->vertex = i;
        (*verhead)[i]->next = NULL;
    }

}

void Insert_Edge( list verhead, int vertex )
{

    list tmp = (list)malloc(sizeof(struct Adjacency_List));

    tmp->vertex = vertex;
    tmp->next = verhead->next;
    verhead->next = tmp;

}

void Read_AdjacencyList( list *verhead, int vertex_num )
{

    int i;

    printf("\n\n");
    for ( i=0; i<vertex_num; i++ ) {
        list p=verhead[i]->next;
        printf("%d",verhead[i]->vertex);
        while (p) {
            printf("----->%d",p->vertex);
            p = p->next;
        }
        printf("\n");
    }

}

void TopSort( list *verhead, int vertex_num )
{

    Listqueue q;
    int i;
    int *indegree;

    indegree = (int *)calloc( sizeof(int), vertex_num );
    Initialize_Queue(&q);
    GetIndegree( verhead, indegree,vertex_num );

    for ( i=0; i<vertex_num; i++ ) {
        if ( !indegree[i] ) {
            Insert_Queue( q, i );
        }
    }

    while ( q->front != NULL ) {
        int vertex = Quit_Queue(q);
        printf("%d->",vertex);
        list p;
        for ( p=verhead[vertex]->next; p!=NULL; p=p->next ) {
            if ( --indegree[p->vertex]==0 ) {
                Insert_Queue( q, p->vertex );
            }
        }
        free(p);
    }
    free(q);

}

void Initialize_Queue(Listqueue *q)
{

    *q = (Listqueue)malloc(sizeof(struct queue));
    (*q)->element = (*q)->front = (*q)->rear = NULL;

}

void GetIndegree( list *verhead, int *indegree, int vertex_num )
{

    list p;
    int i;

    for ( i=0; i<vertex_num; i++ ) {
        indegree[i] = 0;
    }

    for ( i=0; i<vertex_num; i++ ) {
        p = verhead[i]->next;
        while (p) {
            indegree[p->vertex]++;
            p = p->next;
        }
    }

}

void Insert_Queue( Listqueue q, int vertex )
{

    list tmp = (list)malloc(sizeof(struct Adjacency_List));
    tmp->vertex = vertex;
    tmp->next = NULL;
    if ( q->front==NULL ) {
        q->element = tmp;
        q->front = tmp;
        q->rear = tmp;
    } else {
        q->rear->next = tmp;
        q->rear = tmp;
    }

}

int Quit_Queue(Listqueue q)
{

    int result = q->front->vertex;
    list p=q->front;
    q->front = p->next;
    free(p);
    if ( q->front==NULL ) {
        q->rear = NULL;
        q->element = NULL;
    }

    return result;

}
