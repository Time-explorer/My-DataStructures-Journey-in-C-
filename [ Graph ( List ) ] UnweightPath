#include<stdio.h>
#include<stdlib.h>

typedef struct Adjacency_List *list;

struct Adjacency_List {
    int vertex;
    list next;
};

struct queue {
    int size;
    int front;
    int rear;
    int *element;
};

void Initialize_AdjacencyList( list **verhead, int vertex_num );
void Insert_Edge( list verhead, int vertex );
void Read_AdjacencyList( list *verhead, int vertex_num );

void SignalUnweightPath( list *verhead, int vertex_num );
void Initialize_AidArray( int *p, int *a, int length );

void Initialize_Queue( struct queue **q, int size );
void Insert_Queue( struct queue *q, int x );
int Quit_Queue( struct queue *q );

int main()
{

    int vertex_num;
    int v1,v2;
    list *verhead;

    scanf("%d",&vertex_num);
    Initialize_AdjacencyList( &verhead, vertex_num );

    scanf("%d%d",&v1,&v2);
    while ( v1!=-1 && v2!=-1 ) {
        Insert_Edge( verhead[v1], v2 );
        scanf("%d%d",&v1,&v2);
    }
    Read_AdjacencyList( verhead, vertex_num );
    SignalUnweightPath( verhead, vertex_num );

    return 0;

}

void Initialize_AdjacencyList( list **verhead, int vertex_num )
{

    int i;

    *verhead = (list*)malloc(vertex_num*sizeof(struct Adjacency_List));
    for ( i=0; i<vertex_num; i++ ) {
        (*verhead)[i] = (list)malloc(sizeof(struct Adjacency_List));
        (*verhead)[i]->vertex = i;
        (*verhead)[i]->next = NULL;
    }

}

void Insert_Edge( list verhead, int vertex )
{

    list tmp = (list)malloc(sizeof(struct Adjacency_List));

    tmp->vertex = vertex;
    tmp->next = verhead->next;
    verhead->next = tmp;

}

void Read_AdjacencyList( list *verhead, int vertex_num )
{

    int i;

    printf("\n\n");
    for ( i=0; i<vertex_num; i++ ) {
        list p=verhead[i]->next;
        printf("%d",verhead[i]->vertex);
        while (p) {
            printf("----->%d",p->vertex);
            p = p->next;
        }
        printf("\n");
    }

}

void SignalUnweightPath( list *verhead, int vertex_num )
{

    int *path = (int *)calloc( vertex_num, sizeof(int) );
    int *arrive = (int *)calloc( vertex_num, sizeof(int) );
    struct queue *q;

    Initialize_AidArray( path, arrive, vertex_num );
    Initialize_Queue( &q, vertex_num );

    int v;
    int startpoint;
    list p;
    scanf("%d",&startpoint);
    Insert_Queue( q, startpoint );
    path[startpoint] = startpoint;
    arrive[startpoint] = 0;

    while ( q->front != q->rear ) {
        v = Quit_Queue(q);
        for ( p=verhead[v]->next; p; p=p->next ) {
            if ( arrive[p->vertex]<0 ) {
                Insert_Queue( q, p->vertex );
                path[p->vertex] = v;
                arrive[p->vertex] = arrive[v] + 1;
            }
        }
        free(p);
    }
    free(q);

    int goalpoint;
    while ( vertex_num-- ) {
        scanf("%d",&goalpoint);
        while ( path[goalpoint]!=goalpoint ) {
            printf("%d<-",goalpoint);
            goalpoint = path[goalpoint];
        }
        printf("%d\n",goalpoint);
    }
}

void Initialize_AidArray( int *p, int *a, int length )
{
    int i;
    for ( i=0; i<length; i++ ){
        p[i] = -1;
        a[i] = -1;
    }
}

void Initialize_Queue( struct queue **q, int size )
{
    *q = (struct queue *)malloc(sizeof(struct queue));
    (*q)->element = (int *)calloc( size, sizeof(int) );
    (*q)->size = size;
    (*q)->front = 0;
    (*q)->rear = 0;
}

void Insert_Queue( struct queue *q, int x )
{
    q->element[q->rear] = x;
    q->rear = (q->rear+1) % q->size;
}

int Quit_Queue( struct queue *q )
{
    int result = q->element[q->front];
    q->front = (q->front+1) % q->size;

    return result;
}
