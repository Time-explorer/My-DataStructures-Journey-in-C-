#include<stdio.h>
#include<stdlib.h>

/*
struct graph{           // 实际中可看情况将矩阵和边数、点数封装在一起
    int **matrix;
    int vertex_num;
    int edge_num;
};
*/

typedef struct queue {
    int queuesize;
    int *element;
    int front;
    int rear;
} *verqueue;

void Initialize_matrix( int ***matrix, int vertex_num );
void read_matrix( int **matrix, int vertex_num );

void TopSort( int **matrix, int vertex_num );
void GetIndegree( int **matrix, int *indegree, int vertex_num );

verqueue Initialize_VerQueue( int vertex_num );
void Insert_Queue( verqueue q, int element );
int Quit_Queue( verqueue q );

int main()
{

    int vertex_num;
    int **matrix;
    int v1,v2;

    scanf("%d",&vertex_num);
    Initialize_matrix(&matrix,vertex_num);

    scanf("%d%d",&v1,&v2);
    while ( v1>=0 && v2>=0 ) {
        matrix[v1][v2] = 1;
        scanf("%d%d",&v1,&v2);
    }
    read_matrix(matrix,vertex_num);
    TopSort(matrix,vertex_num);

    return 0;

}

void Initialize_matrix( int ***matrix, int vertex_num )
{

    int i;

    *matrix = (int **)calloc(vertex_num,sizeof(int));
    for ( i=0; i<vertex_num; i++ ) {
        (*matrix)[i] = (int *)calloc(vertex_num,sizeof(int));
        int j;
        for ( j=0; j<vertex_num; j++ ) {
            (*matrix)[i][j] = 0;
        }
    }

}

void read_matrix( int **matrix, int vertex_num )
{

    int i;

    printf("\n\n");
    for ( i=0; i<vertex_num; i++ ) {
        int j;
        for ( j=0; j<vertex_num; j++ ) {
            printf("%d ",matrix[i][j]);
        }
        printf("\n");
    }

    printf("\n\n");
    for ( i=0; i<vertex_num; i++ ) {
        int j;
        printf("%d",i);
        for ( j=0; j<vertex_num; j++ ) {
            if ( matrix[i][j] ) {
                printf("---->%d",j);
            }
        }
        printf("\n");
    }

}

void TopSort( int **matrix, int vertex_num )
{

    verqueue q;
    int *indegree;
    int i;
    int vertex;

    indegree = (int *)calloc( vertex_num, sizeof(int) );
    GetIndegree( matrix, indegree, vertex_num );
    q = Initialize_VerQueue(vertex_num);

    for ( i=0; i<vertex_num; i++ ) {
        if ( !indegree[i] ) {
            Insert_Queue( q,i );
        }
    }

    while ( q->front!=q->rear ) {
        vertex = Quit_Queue(q);
        printf("%d->",vertex);
        for ( i=0; i<vertex_num; i++ ) {
            if ( matrix[vertex][i] ) {
                if ( --indegree[i]==0 ) {
                    Insert_Queue( q, i );
                }
            }
        }
    }

}

void GetIndegree( int **matrix, int *indegree, int vertex_num ) // 求入度
{

    int i;

    for ( i=0; i<vertex_num; i++ ) {
        indegree[i] = 0;
    }

    for ( i=0; i<vertex_num; i++ ) {
        int j;
        for ( j=0; j<vertex_num; j++ ) {                        // 边的存储形式为：v1->v2，因此在
            if ( matrix[j][i] ) {                               // 扫描matrix[j][i]时，只要控制i
                indegree[i]++;                                  // 不变来查找进入i的顶点j
            }
        }
    }

}

verqueue Initialize_VerQueue(int vertex_num)
{
    verqueue q = (verqueue)malloc(sizeof(struct queue));
    q->queuesize = vertex_num;
    q->element = (int *)calloc( vertex_num, sizeof(int) );
    q->front = 0;
    q->rear = 0;

    return q;
}

void Insert_Queue( verqueue q, int element )
{
    q->element[q->rear] = element;
    q->rear = ( q->rear + 1 ) % q->queuesize;
}

int Quit_Queue(verqueue q)
{
    int result = q->element[q->front];
    q->front = ( q->front + 1 ) % q->queuesize;
    return result;
}
