class MyHashSet {

    private CellContent[] keys;
    private int capacity;
    private int cellCount;
    
    enum State {exist, empty, deleted};

    class CellContent {
        public int key;
        public State curState;
        { curState = State.empty; }
        public void clear() { curState = State.deleted; }
        public void addCall(int key) { this.key = key; curState = State.exist; }
    }

    /** Initialize your data structure here. */
    public MyHashSet() {
        this(1 << 5);
    }
    
    public MyHashSet(int capacity) {
        this.capacity = getNextPrime(capacity);
        cellCount = 0;
        keys = new CellContent[this.capacity];
        for (int i = 0; i < this.capacity; i++) {
            keys[i] = new CellContent();
        }
    }
    
    public void add(int key) {
        int pos = findPos(key);
        if (keys[pos].curState == State.exist)
            return;
        keys[pos].addCall(key);
        if (++cellCount >= capacity >> 1) {
            increaseCap();
        }
    }
    
    public void remove(int key) {
        int pos = findPos(key);
        keys[pos].clear();
    }
    
    /** Returns true if this set contains the specified element */
    public boolean contains(int key) {
        return (keys[findPos(key)].curState == State.exist) ? true : false;
    }

    /**
     * 
     * <li>keys[pos].key = <b>key</b></li>
     * <li>keys[pos].curState = <b>exist | deleted</b></li>
     * <p>or
     * <li>keys[pos].key = <b>?</b></li>
     * <li>keys[pos].curState = <b>empty</b></li>
     * @param key
     * @return
     */
    private int findPos(int key) {
        int pos = hash(key);
        int i = 0;
        while (keys[pos].curState != State.empty && keys[pos].key != key) {
            pos = (pos + 2 * ++i - 1) % capacity;
        }
        return pos;
    }

    private int hash(int key) {
        return key % capacity;
    }

    private int getNextPrime(int capacity) {
        while (true) {
            int i;
            capacity++;
            for (i = 2; i < Math.sqrt(capacity); i++) {
                if (capacity % i == 0) 
                    break;
            }
            if (i >= Math.sqrt(capacity))
                return capacity;
        }
    }

    private void increaseCap() {
        CellContent[] oldCell = keys;
        capacity = getNextPrime(capacity << 1);
        cellCount = 0;
        keys = new CellContent[capacity];
        for (int i = 0; i < capacity; i++) {
            keys[i] = new CellContent();
        }
        for (int i = 0; i < oldCell.length; i++) {
            if (oldCell[i].curState == State.exist) {
                add(oldCell[i].key);
                cellCount++;
            }
        }
        oldCell = null;
    }

}
