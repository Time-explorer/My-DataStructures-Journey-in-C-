#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// 这儿两个宏只是为了能跟简单的二叉堆
// 兼容而已，详情看 main 函数里的备注行
#define insert(h, x) (h = insert_heap(h, x)) 
#define deletemin(h) (findMin(&h))           

typedef struct heap_content *heap;

struct heap_content
{
    // 零路径长
    /* ////！若用[斜堆]的话，可以不用npl标记！//// */
    int npl;
    heap lc;
    heap rc;
    int level;
};

//-----------------------------
heap Merge(heap h1, heap h2);
heap Merge_next(heap h1, heap h2);
heap insert_heap(heap h, int x);
heap delete_min(heap h);
void read_heap(heap h, int x);
void InorderTraversal(heap h);
int findMin(heap *h);
//-----------------------------

int main(void)
{
    heap h1, h2;
    int input, N, i;

    srand(time(NULL));
    scanf("%d", &N);
    h1 = h2 = NULL;

    for (i = N; i > 0; i--)
    {
        h1 = insert_heap(h1, rand() % (N * 5));
        // insert(h1,rand()%(N*5));
        h2 = insert_heap(h2, rand() % (N * 5) + N * 5);
        // insert(h2,rand()%(N*5)+N*5);
    }
    read_heap(h1, 1);
    read_heap(h2, 2);

    h1 = Merge(h1, h2);
    read_heap(h1, 1);

    printf("\n\n--These following are tests about Delete the min:\n");
    for (i = 1; i < N; i *= 2)
    {
        h1 = delete_min(h1);
        // int tmp = deletemin(h1);
        read_heap(h1, 1);
        printf("\n");
    }

    return 0;
}

/**
 * 合并思想：将较大堆连到较小堆的右支
 * 但这个函数只是做驱动，核心是 Merge_next
 */
heap Merge(heap h1, heap h2)
{
    // 前两个的处理都是一个堆空则返另一个堆
    if (!h1)
        return h2;
    else if (!h2)
        return h1;
    else
    {
        if (h1->level > h2->level)
            return Merge_next(h2, h1);
        else
            return Merge_next(h1, h2);
    }
}

/*合并核心*/
heap Merge_next(heap h, heap H)
{
    // 若左空，则右必定空(左式堆定义)
    // 因此可以直接 H 接到左分支 
    if (!h->lc)
        h->lc = H;
    else
    {
        // 将 h->rc 和 H 放入驱动函数比较
        h->rc = Merge(h->rc, H);
        // 判断合并后是否破坏左式堆定义
        /* ////若用[斜堆]的话，可以省略判定！//// */
        if (h->lc->npl < h->rc->npl)
        {                  
            H = h->lc;     
            /* ////斜堆每次合并都要转换一次左右孩//// */
            h->lc = h->rc;
            h->rc = H;
        }
        // 更新 npl
        h->npl = h->rc->npl + 1;
    }

    return h;
}

heap insert_heap(heap h, int x)
{
    heap tmp;

    tmp = (heap)malloc(sizeof(struct heap_content));
    tmp->level = x;
    tmp->npl = 0;
    tmp->lc = tmp->rc = NULL;

    //插入后合并(一个点也是堆)
    return Merge(tmp, h);
}

heap delete_min(heap h)
{
    heap lh, rh;

    printf("--( Min: %d )--\n", h->level);
    lh = h->lc;
    rh = h->rc;
    free(h);

    // 删除根后要合并左右堆
    return Merge(lh, rh);
}

void InorderTraversal(heap h)
{
    if (h != NULL)
    {
        InorderTraversal(h->lc);
        printf("=%d=", h->level);
        InorderTraversal(h->rc);
    }
}

void read_heap(heap h, int i)
{
    printf("h%d:", i);
    InorderTraversal(h);
    printf("\n");
}

/**
 * 返回一个整数，不过需要用双重指针帮忙改动整个堆(只能返回 int )
 */
int findMin(heap *h)
{
    int min = (*h)->level;
    *h = delete_min(*h);

    return min;
}
