#include<stdio.h>       //这是课本里的，头指针指向未知数据p,不是头个数据元素
#include<stdlib.h>      //

typedef struct queue
{
    int content;
    struct queue *next;
}QE;

typedef struct          //包装进结构体可以将其当全局变量使用，方便头尾指针移动
{
   QE *front,*rear;
}h_t;

h_t *build_queue(h_t *l,int x)
{
    QE *p;

    p = (QE *)malloc(sizeof(QE));
    p->content = x;
    p->next = NULL;
    l->rear->next = p;
    l->rear = p;
    return l;
}

int go_queue(h_t *l)
{
    QE *p;

    if(l->front==l->rear) return 0;
    else
    {
        printf("the '%d' is moved\n",l->front->next->content);
        p = l->front->next;
        l->front->next = l->front->next->next;
        free(p);
        if(!(l->front->next)) l->rear = l->front;
        return 1;
    }
}

void read_queue(h_t *l)
{
    QE *p;

    if(l->front!=l->rear)
    {
        p = l->front->next;
        while(p)
        {
            printf("%d",p->content);
            p = p->next;
        }
        printf("\n");
    }
}

int main(void)
{
    int choose;
    int input;
    QE *q=(QE *)malloc(sizeof(QE));
    h_t *Lp=(h_t *)malloc(sizeof(h_t));

    Lp->front = Lp->rear = q;
    while(scanf("%d",&choose)!=EOF)
    {
        switch(choose)
        {
            case 1:
            {
                scanf("%d",&input);
                Lp = build_queue(Lp,input);
                break;
            }
            case 2:
            {
                if(!go_queue(Lp)) printf("Empty\n");
                break;
            }
            case 3:read_queue(Lp);break;
        }
    }
    return 0;
}
