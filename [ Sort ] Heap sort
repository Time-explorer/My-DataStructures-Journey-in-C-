#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// 从 0 开始计算
#define nextchild(i) (2 * (i) + 1)

void read_array(int *a, int N);
void Pecolate_Down(int *a, int index, int N);
void Array_sort(int *a, int N);

int main(void)
{
    int N, i;
    int *a;

    scanf("%d", &N);
    srand((unsigned) time(NULL));
    a = (int *) malloc(N * sizeof(int));

    for (i = 0; i < N; i++)
        a[i] = rand() % (N * 7);
    read_array(a, N);

    Array_sort(a, N);
    read_array(a, N);

    return 0;
}

void read_array(int *a, int N)
{
    int i;

    for (i = 0; i < N; i++)
        printf("%d->", a[i]);
    printf("\n");
}

void Pecolate_Down(int *a, int index, int N)
{
    int tmp;
    int next;

    // 和非排序堆不同的是，数组头 a[0] 在这儿是有效的
    for (tmp = a[index]; nextchild(index) < N; index = next)
    {
        next = nextchild(index);
        if (next < N - 1 && a[next] < a[next + 1])
            next++;

        if (a[next] > tmp)
            a[index] = a[next];
        else
            break;
    }
    a[index] = tmp;
}

/**
 * 在 a 数组里直接原地排序。
 * 
 * 第一个循环先建立一个反序的堆（目标是从小到大排序，则建立大顶堆，反之亦然）。
 * 
 * 第二个循环在堆的基础上不断将堆顶的元素推到数组最后（但之前放入的元素不变，也就是
 * 元素放入 n-1, n-2, n-3..），然后持续维护堆的大顶特性。
 */
void Array_sort(int *a, int N)
{
    int i = N / 2;

    // 可以从 n 开始，但没必要，因为没有叶子节点给它下滤，所以一般从 n/2 开始
    for (; i >= 0; i--)
        Pecolate_Down(a, i, N);
    for (i = N - 1; i >= 0; i--)
    {
        a[0] ^= a[i];
        a[i] = a[0] ^ a[i];
        a[0] ^= a[i];
        Pecolate_Down(a, 0, i);
    }
}
