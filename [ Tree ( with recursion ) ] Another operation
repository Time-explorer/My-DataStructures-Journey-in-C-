#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef int ElementType;
typedef struct TNode *Position;
typedef Position BinTree;
struct TNode
{
    ElementType Data;
    BinTree Left;
    BinTree Right;
};

void PreorderTraversal(BinTree BT); /* 先序遍历，由裁判实现，细节不表 */
void InorderTraversal(BinTree BT);  /* 中序遍历，由裁判实现，细节不表 */

BinTree Insert(BinTree BST, ElementType X);
BinTree Delete(BinTree BST, ElementType X);
Position Find(BinTree BST, ElementType X);
Position FindMin(BinTree BST);
Position FindMax(BinTree BST);

int main()
{
    BinTree BST, MinP, MaxP, Tmp;
    ElementType X;
    int N, i;

    srand(time(NULL));
    BST = NULL;
    scanf("%d", &N);
    for (i = 0; i < N; i++)
    {
        // scanf("%d", &X);
        X = rand() % 1000;
        BST = Insert(BST, X);
    }
    printf("Preorder:");
    PreorderTraversal(BST);
    printf("\n");
    MinP = FindMin(BST);
    MaxP = FindMax(BST);
    scanf("%d", &N);
    for (i = 0; i < N; i++)
    {
        scanf("%d", &X);
        Tmp = Find(BST, X);
        if (Tmp == NULL)
            printf("%d is not found\n", X);
        else
        {
            printf("%d is found\n", Tmp->Data);
            if (Tmp == MinP)
                printf("%d is the smallest key\n", Tmp->Data);
            if (Tmp == MaxP)
                printf("%d is the largest key\n", Tmp->Data);
        }
    }
    scanf("%d", &N);
    for (i = 0; i < N; i++)
    {
        scanf("%d", &X);
        BST = Delete(BST, X);
    }
    printf("Inorder:");
    InorderTraversal(BST);
    printf("\n");

    return 0;
}

// 先序遍历
void PreorderTraversal(BinTree BST)
{
    if (BST != NULL)
    {
        printf("%d-", BST->Data);
        PreorderTraversal(BST->Left);
        PreorderTraversal(BST->Right);
    }
}

// 先序遍历
void InorderTraversal(BinTree BST)
{
    if (BST != NULL)
    {
        InorderTraversal(BST->Left);
        printf("=%d=", BST->Data);
        InorderTraversal(BST->Right);
    }
}

// 插入&新建
BinTree Insert(BinTree BST, ElementType X)
{
    if (!BST)
    {
        BST = (struct TNode *) malloc(sizeof(struct TNode));
        BST->Data = X;
        BST->Left = BST->Right = NULL;
    }
    else if (X < BST->Data)
        BST->Left = Insert(BST->Left, X);
    else
        BST->Right = Insert(BST->Right, X);

    return BST;
}

// 删除结点
BinTree Delete(BinTree BST, ElementType X)
{
    if (!BST)
        printf("Not Found\n");
    else if (X > BST->Data)
        BST->Right = Delete(BST->Right, X);
    else if (X < BST->Data)
        BST->Left = Delete(BST->Left, X);

    //---------------以上是查找位置，但最后会返回值，环环相扣
    //---------------下面开始删除（即 BST->Data == X）

    // 结点有两子树
    else if (BST->Left && BST->Right)
    {
        // 删除思想：将该结点的数据元素与该结点的右子树的最小值交换。
        // 之后将最小叶子删除
        BinTree p = FindMin(BST->Right);
        BST->Data = p->Data;
        Delete(BST->Right, BST->Data);
    }
    else // 结点的子树小于2
    {
        BinTree p = BST;
        if (!BST->Left)
            BST = BST->Right;
        else if (!BST->Right)
            BST = BST->Left;
        free(p);
    }
    return BST;
}

// 找结点
Position Find(BinTree BST, ElementType X)
{
    if (!BST)
        return NULL;
    else if (X > BST->Data)
        return Find(BST->Right, X);
    else if (X < BST->Data)
        return Find(BST->Left, X);
    else
        return BST;
}

// 找最小结点（叶子）
Position FindMin(BinTree BST)
{
    BinTree p = BST;

    if (!BST)
        return NULL;
    while (p->Left != NULL)
        p = p->Left;
    return p;
}

// 找最大结点（叶子）
Position FindMax(BinTree BST)
{
    if (!BST)
        return NULL;
    else if (BST->Right == NULL)
        return BST;
    else
        return FindMax(BST->Right);
}
